<?php

use Illuminate\Database\Capsule\Manager as DB;



// $getLevels = DB::table('level')->where(['status' => 1, 'isdelete' => 0])->get();

// die($response->withJson($getLevels));

$levelPositions = DB::table('level_positions as lp')->where('isdelete', 0)->get();
// die($response->withJson($levelPositions));


$lables = [];

$levels = [];

$values = [];

$allPositions = $obj->get(); 
// die($response->withJson($allPositions));

	

function datatest($value){

	// foreach ($levelPositions as $i => $k) {
	// 		// 		print_r($k->position_id );

	// 		// die();
	// 	if ($k->position_id == $value->id) {
	// 		// print_r($value->id);
	// 		// die();
	// 		return $k->point;
	// 	}
	// }

	// return false;


	$data = DB::table('level_positions as lp')->where('position_id', $value->id)->where('isdelete', 0)->first();

		// if($data) {		
		// 	return $data ;//$values[$count++] = $data->point;
		// } else {
		// 	return false;//$values[$count++] = 1;	
		// }

		if($data) {		
			 return $data->point;
		} 

		return false;
}

function datalevel(){
	$getLevels = DB::table('level')->where(['status' => 1, 'isdelete' => 0])->get();

	foreach ($getLevels as $index => $v) {			
		$levels[$v->id] = $v->title;
	}

	return $levels;
}

function datavalue(){
	$value = DB::table('level_positions as lp')->where('isdelete', 0)->get();

	foreach ($value as $index => $v) {			
		$values[$v->position_id] = $v->point;
	}

	return $values;
}

foreach ($allPositions as $key => $value) {
	$lables[$value->id] = $value->title;
}

// die($response->withJson($lables));
// $data_summaries = [array_flip($lables)];

$testdata = [];
foreach($lables as $item => $value) {
	// print_r($item);die();
	$level_positions = DB::table('level_positions as lp')->where('isdelete', 0)->get();

	foreach($level_positions as $key => $l )
	{
		foreach($levels as $i => $k){
			if ($item == $l->position_id && $l->level_id == $i) {
				$testdata[$k] = $l->point;
			}
		}
		// $data_summaries[$key] = array($levels, $values);
	}
}




// // $test = datalevel();
$test = datavalue();
die($response->withJson($testdata));






// $count = 0;
// foreach ($allPositions as $key => $value) {
// 	$lables[$key] = $value->title;

	

// 	$check = datatest($value);

// 	if ($check == false) {
// 		// echo 'fai';

// 		$values[$count++] = 1;		
// 	} else {
// 		// echo 'ok';
// 		$values[$count++] = $ckeck;	
// 	}
// }
// // print_r($values);
// // die();


// $summaries = array(
// 		'positions' => array($lables),
// 		'levels' => array($levels),
// 		'values' => array($values)

// );

// $positionTitles = array(
// 		'positions' => array($lables),
// );

// $data_summaries = [array_flip($lables)];

// foreach($data_summaries as $test) {
// 	foreach($test as $key => $value)
// 	{
// 		$data_summaries[$key] = array($levels, $values);
// 	}
// }

// die($response->withJson($data_summaries));


// foreach ($summaries['lables']['position'] as $value) {
// 	echo $value;
// }

// foreach($summaries as $book) {
// 	echo "<br>";
// 	foreach($book['positions'] as $key => $value)
// 	{
// 		echo $value. "<br>";
// 	}
// }
// die();
// die($response->withJson($summaries));

// echo count($levels);
// die();



// $results = [
//     'status' => 'success',
//     'summary' => $data_summaries,
//     // 'department' => $department,
//     'data' => $ketqua ? $ketqua->all() : null,
//     'total' => $ketqua ? $ketqua->count() : null,
//     'time' => time(),
// ];







// 
//  positions 
// a, b ,c 


//  add level_positions
// a1, b1 
// point

// level - 
// update point

// a
// b
// c 
// d






























////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
<?php

use Illuminate\Database\Capsule\Manager as DB;


$getLevels = DB::table('level')->where(['status' => 1, 'isdelete' => 0])->get();

$lables = [];

$levels = [];

$values = [];

$allPositions = $obj->get(); 

foreach ($allPositions as $key => $value) {
	$lables[$key] = $value->title;
	foreach ($getLevels as $index => $v) {
		$levels[$index] = $v->title;
		$values[$index] = $v->point;
	}
}


$data_summaries = [array_flip($lables)];

foreach($data_summaries as $test) {
	foreach($test as $key => $value)
	{
		$data_summaries[$key] = array($levels, $values);
	}
}


$results = [
    'status' => 'success',
    'summary' => $data_summaries,
    // 'department' => $department,
    'data' => $ketqua ? $ketqua->all() : null,
    'total' => $ketqua ? $ketqua->count() : null,
    'time' => time(),
];


















































////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////

<?php

use Illuminate\Database\Capsule\Manager as DB;



$getLevels = DB::table('level')->where(['status' => 1, 'isdelete' => 0])->get();
// die($response->withJson($levels->get()));
$level_positions = DB::table('level_positions as lp')->where('isdelete', 0)->get();

$max_id =  DB::table('level')->max('id');


$lables = [];

$levels = [];

$values = [];

$allPositions = $obj->get(); 


foreach ($allPositions as $key => $value) {
	$lables[$key] = $value->title;
}

function checkPosition($value){
	$check = DB::table('positions')->where('id', $value)->where(['status' => 1, 'isdelete' => 0])->first();

	if($check){
		return $check->id;
	}

	return false;
}

function checkLevel($value){
	$check = DB::table('level')->where('id', $value)->where(['status' => 1, 'isdelete' => 0])->first();

	if($check){
		return $check->id;
	}

	return false;
}

$count =0;
// foreach ($allPositions as $key => $value) {
// 	$lables[$key] = $value->title;
	foreach ($getLevels as $index => $v) {
		$check = false;

			 // print_r($level_positions[$3]->point);
			 // die();
		$levels[$v->id] = $v->title;

		for($i=0;$i<count($level_positions);$i++) {
			if ($level_positions[$i]->level_id == $v->id && $level_positions[$i]->position_id == checkPosition($level_positions[$i]->position_id)) {//$value->id
			 // print_r($level_positions[$i]->level_id);
			 	$values[$level_positions[$i]->level_id ] = $level_positions[$i]->point;
				// die('ok');
				
				$data_summaries = [array_flip($lables)];

				$check=true;

				foreach($data_summaries as $test) {
					foreach($test as $key => $value)
					{
						// print_r($value);die();
						// if ($level_positions[$i]->position_id == $value) {						
							$data_summaries[$key] = array($levels, $values);
						// }
					}
				}
			}		
		}
		
		if ($check == false) {
			// $values[$v->id] = 1;
			$value_temp[$count] = 1;

			// $data_summaries = [array_flip($lables)];

			foreach($data_summaries as $test) {
				foreach($test as $key => $value)
				{
					// print_r($value);die();
					// if($level_positions[$i]->position_id == $value){
						$data_summaries[$key] = array($levels, $value_temp);
					// }
				}
			}
			$count++;
		}
	}
// }
// die();

// $data_summaries = [array_flip($lables)];

// foreach($data_summaries as $test) {
// 	foreach($test as $key => $value)
// 	{
// 		$data_summaries[$key] = array($levels, $values);
// 	}
// }

// $data_summaries = [array_flip($lables)];

// foreach($data_summaries as $test) {
// 	foreach($test as $key => $v)
// 	{
// 		// $data_summaries[$key] = array($levels, $values);
// 		foreach ($levels as $index => $l) {
// 			$check = false;
// 			foreach ($values as $i => $k) {
// 				if($index == $i){
// 					$values[$index] == $k;
// 					$check=true;
// 				}
// 			}
// 			if($check ==false){
// 				$values[$index] = 1;
// 			}
// 		}
// 		// $data_summaries[$key] = array($levels, $values);

// 	}
// }




// $data_summaries = [array_flip($lables)];

// foreach($data_summaries as $test) {
// 	foreach($test as $key => $value)
// 	{
// 		$data_summaries[$key] = array($levels, $values);
// 	}
// }
// die($response->withJson($data_summaries));


$results = [
    'status' => 'success',
    'summary' => $data_summaries,
    // 'data' => $ketqua ? $ketqua->all() : null,
    'total' => $ketqua ? $ketqua->count() : null,
    'time' => time(),
];






/////////////////////////////////////////////////////////////
// $all_levels = DB::table('level')->where(['status' => 1, 'isdelete' => 0])->get();
// // die($response->withJson($all_levels));

// $all_level_positions = DB::table('level_positions as lp')->where('isdelete', 0)->get();

// // die($response->withJson($all_level_positions));

// $results = [
//     'status' => 'success',
//     'positions' =>  $ketqua->all(),
//     'levels' => $all_levels,
//     'levelpositions' => $all_level_positions,
//     // 'department' => $department,
//     // 'data' => $ketqua ? $ketqua->all() : null,
//     'total' => $ketqua ? $ketqua->count() : null,
//     'time' => time(),
// ];



// [
// 	'title' => 
// 		[
// 			'1' => 'intern',
// 			'2' => 'fresher'
// 		]
// 		[
// 			'1' => 2.3,
// 			'2' => 1
// 		]

// 	'anynomous' => 
// 		[
// 			'1' => 'intern',
// 			'2' => 'fresher'
// 		]
// 		[
// 			'1' => 1,
// 			'2' => 1
// 		]

// ]


















