

//crud\add\position_point_before.php
---------------------------------
<?php

use Illuminate\Database\Capsule\Manager as DB;
use Respect\Validation\Validator as v;

$name = 'level_positions';

$exception_feature = true;

// $exception_feature = true;

// // echo 'ok';

// // throwError($container, $request, [
// //     'point' => v::length(1, 6)->notEmpty()->noWhitespace()
// // ]);

// if(!empty($data->point)){
//     $data->point = trim($data->point);
// }

// if (!empty($data->point)) {
//     if (!preg_match("^(\d)*(\.)?([0-9]{1})?$", $data->point, $matches)) {
//         print_r($matches);
//         throw new Exception('Enter only numbers and periods (.)');
//     }
// }

// print_r($data->point);die('ok');

// // update point in table level_positions - các trường hợp sảy ra
// // 1. point đã tồn tại -> update theo id table level_positions
// // 2. point không tồn tại và thay đổi default(1) thành giá trị khác -> thêm mới point theo level_id và position_id tương ứng
// // 3. point không tồn tại default(1) và giũa nguyên giá trị -> thêm mới point theo level_id và position_id tương ứng

// //
// // 1. point đã tồn tại -> update theo id table level_positions
// // $check_point =  DB::table('level_positions as lp')->where('id', $id)->where('isdelete', 0)->first();

// if (!empty($data->arrayid)) {
//     foreach($arrayid as $key =>$value){
//         $update_level_position = DB::table('level_positions')->where('id', $value)->update([
//             'point' => $data->point
//         ]);
//     }

//     // đề xuất:  $data->point
//     // $data_point_exist = ['level'=>[],'position'=>[],'point'=>[]]
// }

// // 2. point không tồn tại và thay đổi default(1) thành giá trị khác -> thêm mới point theo level_id và position_id tương ứng
// if (empty($check_point->id)) {
//     // $level_positions = DB::table('level_positions as lp')->where(['level_id' => $data->level_id, 'position_id' => $data->position_id])->update([
//     //     'point' => $data->point
//     // ]);

//     foreach($data->levelids as $key =>$levelid){
//         foreach($data->positionids as $index =>$positionid){

//             $check = DB::table('level_positions')->where(['level_id' => $levelid, 'position_id' => $positionid])->first();

//             if (!empty($check)) {
//                 $create_level_position = DB::table('level_positions')->insert([
//                     'level_id' => $data->level_id,
//                     'position_id' => $data->position_id,
//                     'point' => $data->point
//                 ]);
//             }
//         }

//     }
//    // đề xuất:  $data->point
//     // $data_point_not_exist = ['level'=>[],'position'=>[],'point'=>[]]
// }

// Giá trị mặc định bằng 1
// Hệ thống hiển thị input box để chỉnh sửa
// - required
// - maxlength=6
// - Chỉ nhập chữ số và dấu chấm (.)
// - Tối đa 4 chữ số sau dấu chấm
// - Tự cắt số 0 đầu/ cuối(sau dấu chấm) sau khi lưu
// - trim() khoảng trắng
// Nút xác nhận chỉ Lưu khi có chỉnh sửa

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// if (is_string($data->point)) {
//     throw new Exception('Data must be numeric!');
// }

// if (is_int($data->point)) {
//     if ($data->point < 1) {
//         throw new Exception('Do not enter leading zeros!!');
//     }

//     throwError($container, $request, [
//         'point' => v::digit()->length(1, 6)->notEmpty()->noWhitespace(),
//     ]);
// }

// if (is_float($data->point)) {
//     $numlength = strlen((string) $data->point);

//     if ($numlength < 0 || $numlength > 6) {
//         throw new Exception('Invalid data, length number > 0 && <= 6!');
//     }

//     throwError($container, $request, [
//         'point' => v::floatVal()->notEmpty()->noWhitespace(),
//     ]);
// }

// $data->point = (string) $data->point;

// if (!empty($data->point)) {
//     $data->point = ltrim($data->point, 0);

//     $count = strlen($data->point);

//     $dot = strpos($data->point, '.');
//     // echo $dot;die();

//     $dots = substr_count($data->point, '.');

//     if ($count != 1 && $count == $dot + 1 || $dot === 0 || $dots > 1) { //
//         throw new Exception('Invalid data!');
//     }

//     if ($dot) {
//         $data->point = rtrim($data->point, 0);

//         $count = strlen($data->point);

//         $dot = strpos($data->point, '.');

//         if ($count == $dot + 1) {
//             $data->point = rtrim($data->point, '.');
//         }
//     }

//     // echo $dot;die();
// }

// die('ok');

$get_levels = DB::table('level')->where(['status' => 1, 'isdelete' => 0])->get();

$level_positions = DB::table('level_positions as lp')->where(['isdelete' => 0])->where('position_id', '!=', 0)->get();

$levels = [];

function checkPosition($value)
{
    $check = DB::table('positions')->where('title', $value)->where(['status' => 1, 'isdelete' => 0])->where('parent_id', '!=', 0)->first();

    if (!empty($check)) {
        return $check->id;
    }

    return false;
}

function getPosition($value)
{
    $position = DB::table('positions')->where('title', $value)->where(['status' => 1, 'isdelete' => 0])->where('parent_id', '!=', 0)->first();

    if (!empty($position)) {
        return $position->title;
    }

    return false;
}

function checkLevel($value)
{
    $check = DB::table('level')->where('title', $value)->where(['status' => 1, 'isdelete' => 0])->first();

    if (!empty($check)) {
        return $check->id;
    }

    return false;
}

function getLevel($value)
{
    $level = DB::table('level')->where('title', $value)->where(['status' => 1, 'isdelete' => 0])->first();

    if (!empty($level)) {
        return $level->title;
    }

    return false;
}

function checkLevelPosition($value)
{
    $check = DB::table('level_positions')->where('position_id', $value)->where(['isdelete' => 0])->where('position_id', '!=', 0)->first();

    if (!empty($check)) {
        return $check->position_id;
    }

    return false;
}

foreach ($get_levels as $index => $v) {
    $levels[$v->id] = $v->title;
}

// $datas = json_decode($request->getBody());

// foreach ($datas as $item => $data) {
//     // print_r($item); //status data end
//     foreach ($data as $key => $title) {
//         // print_r($key); //test 7x
//         foreach ($title as $index => $lable) {
//             print_r($lable); //2 1 1 1..
//         }
//     }
// }

// die($response->withJson($datas['data']));
// die('end');

// // *** update - quy đổi điểm
// // 1. check position
// // 2. check level
// // 3. -> true ===> inserOrUpdate
// // note: $data_point_positions là data trả về từ frontend
// $data_point_positions = json_decode($request->getBody());
$data_point_positions = json_decode($request->getBody(), true);
// die($data_point_positions);

// $file = 'filename.txt';
// // $s= substr($file, 0, strpos($file, '.')); //filename
// $s = substr($file, strpos($file, '.')+1); //txt
// die($s);

foreach ($data_point_positions as $key => $title) {
    if ($key == getPosition($key)) {
        $position_id = checkPosition($key);

        foreach ($title as $index => $lable) {
            $format_level = substr($index, strpos($index, '.') + 1);

            $level_not_exist = substr($index, 0, strpos($index, '.')); //filename

            if ($format_level == getLevel($format_level) && $key == getPosition($key)) {
                $status = DB::table('level_positions')->where('id', substr($index, 0, strpos($index, '.')))->update([
                    'point' => $data_point_positions[$key][$index],
                ]);
            }

            if ($level_not_exist == 0) {
                $level_id = checkLevel($format_level);

//                 $test = DB::table('level_positions')->where('level_id', '!=', $level_id)->where('position_id', '!=', $position_id)->first();
// print_r($test);die();

                // $columns = [
                //     'level_id',
                //     'position_id'
                // ];

                // $values = [
                //     $level_id,
                //     $position_id
                // ];

                // https://github.com/laravel/ideas/issues/1021
                $check_exist = DB::table('level_positions')
                // ->whereRaw(
                //     '('.'level_id'.','.'position_id'.') in ('.$level_id.','.$position_id.')'
                // )
                // ->select( 'level_id','position_id', DB::raw( '('.implode(',', $columns).') in ('.implode(',', $values).')' ))
                // ->whereRaw(
                //     '('.implode(',', $columns).') in ('.implode(',', $values).')'
                // )
                ->whereIn('level_id',  [$level_id])->whereIn('position_id',  [$position_id])
                ->first();
// print_r($orders);die();


                if (empty($check_exist)) {
                      DB::table('level_positions')->updateOrInsert([
                        'level_id' => $level_id,
                        'position_id' => $position_id,
                        'point' => $data_point_positions[$key][$index],
                    ]);
                }              
            }
        }
    }
}

// print_r($test);

// die('end');


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///home/amidn/hive_http/_temp/hr-tool-dev-me/crud/more/position_point_after.php
---------------------

<?php

use Illuminate\Database\Capsule\Manager as DB;

$get_levels = DB::table('level')->where(['status' => 1, 'isdelete' => 0])->get();

$level_positions = DB::table('level_positions as lp')->where(['isdelete' => 0])->where('position_id', '!=', 0)->get();

$lables = [];

$levels = [];

$get_positions = $obj->get();

function checkPosition($value)
{
    $check = DB::table('positions')->where('id', $value)->where(['status' => 1, 'isdelete' => 0])->where('parent_id', '!=', 0)->first();

    if (!empty($check)) {
        return $check->id;
    }

    return false;
}

function getPosition($value)
{
    $position = DB::table('positions')->where('id', $value)->where(['status' => 1, 'isdelete' => 0])->where('parent_id', '!=', 0)->first();

    if (!empty($position)) {
        return $position->title;
    }

    return false;
}

function checkLevel($value)
{
    $check = DB::table('level')->where('id', $value)->where(['status' => 1, 'isdelete' => 0])->first();

    if (!empty($check)) {
        return $check->id;
    }

    return false;
}

function getLevel($value)
{
    $level = DB::table('level')->where('id', $value)->where(['status' => 1, 'isdelete' => 0])->first();

    if (!empty($level)) {
        return $level->title;
    }

    return false;
}

function checkLevelPosition($value)
{
    $check = DB::table('level_positions')->where('position_id', $value)->where(['isdelete' => 0])->where('position_id', '!=', 0)->first();

    if (!empty($check)) {
        return $check->position_id;
    }

    return false;
}

foreach ($get_positions as $key => $value) {
    $lables[$value->id] = $value->title;
}

foreach ($get_levels as $index => $v) {
    $levels[$v->id] = $v->title;
}

$point_positions = [[[]]];

for ($i = 0; $i < count($level_positions); $i++) {
    if ($level_positions[$i]->level_id == checkLevel($level_positions[$i]->level_id) && $level_positions[$i]->position_id == checkPosition($level_positions[$i]->position_id)) {
        $point_positions[getPosition($level_positions[$i]->position_id)][$level_positions[$i]->id . '.' . getLevel($level_positions[$i]->level_id)] = $level_positions[$i]->point;
    }
}

foreach ($lables as $key => $lable) {
    if (empty($point_positions[$lable])) {
        foreach ($levels as $index => $level) {
            if (empty($point_positions[$lable][$level])) {
                $point_positions[$lable]['0.' . $level] = 1;
            }
        }
    }

    if (!empty($point_positions[$lable])) {
        foreach ($levels as $index => $level) {

            if (empty($point_positions[$lable][$level])) {
                $point_positions[$lable]['0.' . $level] = 1;
            }
        }
    }
}

for ($i = 0; $i < count($level_positions); $i++) {
    if (!empty($point_positions[getPosition($level_positions[$i]->position_id)]['0.' . getLevel($level_positions[$i]->level_id)])) {
        unset($point_positions[getPosition($level_positions[$i]->position_id)]['0.' . getLevel($level_positions[$i]->level_id)]);
    }
}

unset($point_positions[0]);

$results = [
    'status' => 'success',
    'data' => $point_positions ? $point_positions : null,
    'total' => $point_positions ? count($point_positions) : null,
    'time' => time(),
];
