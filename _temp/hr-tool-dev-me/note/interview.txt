https://www.slimframework.com/docs/v3/concepts/life-cycle.html
https://www.freetimelearning.com/software-interview-questions-and-answers.php?What-is-Application-Life-Cycle-in-Slim-Framework?&id=5649

1. Khởi tạo: Đầu tiên, khởi tạo class Slim\App. Đây là đối tượng ứng dụng Slim. Trong quá trình khởi tạo, Slim đăng ký các dịch vụ mặc định cho từng ứng dụng phụ thuộc.

2. Định nghĩa routes: Thứ hai, xác định các tuyến bằng cách sử dụng các method routing get(), post(), put(), delete(), patch(), head() và options() của các instance ứng dụng. Các method instance này đăng ký một router với đối tượng Bộ routingcủa ứng dụng. Mỗi method định tuyến trả về Route instance để có thể gọi ngay các method của Route instance để thêm middleware or assign a name.


3. Application Runner: Thứ ba, gọi method run() của application instance’s. Phương pháp này bắt đầu quá trình sau:

A. Nhập Middleware Stack: method run () bắt đầu đi qua bên trong stack middleware của ứng dụng. Đây là cấu trúc của các middleware layer nhận (và tùy chọn thao tác) các đối tượng Môi trường, Yêu cầu và Phản hồi trước (và sau khi) ứng dụng Slim chạy. Ứng dụng Slim là lớp trong cùng của the concentric middleware structure. Mỗi middleware layer  được gọi bên trong bắt đầu từ lớp ngoài cùng.

B. Chạy ứng dụng: Sau khi method run () đạt đến middleware layer bên trong nhất, nó gọi phiên bản ứng dụng và gửi yêu cầu HTTP hiện tại đến đối tượng tuyến ứng dụng thích hợp. Nếu một tuyến phù hợp với method HTTP và URI, middleware  và phần mềm có thể gọi của tuyến sẽ được gọi. Nếu không tìm thấy một tuyến phù hợp, trình xử lý Không tìm thấy hoặc Không được phép sẽ được gọi.

C.  Exit Middleware Stack: Sau khi quá trình gửi ứng dụng hoàn tất, mỗi middleware layer lấy lại quyền kiểm soát ra bên ngoài, bắt đầu từ lớp bên trong nhất.

D. Gửi phản hồi HTTP: Sau khi middleware layer ngoài cùng nhường quyền kiểm soát, phiên bản ứng dụng chuẩn bị, tuần tự hóa và trả về phản hồi HTTP. Tiêu đề phản hồi HTTP được đặt bằng phương thức header() của PHP và nội dung phản hồi HTTP được xuất ra bộ đệm đầu ra hiện tại.








//Mọi yêu cầu HTTP đều có phần thân. Nếu đang xây dựng một ứng dụng Slim sử dụng dữ liệu JSON hoặc XML, có thể sử dụng phương thức getParsedBody() của đối tượng Yêu cầu PSR-7 để phân tích cú pháp nội dung yêu cầu HTTP thành định dạng PHP gốc.
$parsedBody = $request->getParsedBody();


//Nếu phương thức yêu cầu là POST và Content-Type là ứng dụng/x-www-form-urlencoding hoặc multipart/form-data, bạn có thể truy xuất tất cả các tham số POST như sau:
/ Get all POST parameters
$params = (array)$request->getParsedBody();

// Get a single POST parameter
$foo = $params['foo'];


//file uploads lên trong $_FILES có sẵn từ phương thức getUploadedFiles() của đối tượng Yêu cầu. Điều này trả về một mảng returns an array keyed by the name của phần tử đầu vào.
$files = $request->getUploadedFiles();


//Về mặt kỹ thuật, đối tượng Yêu cầu PSR-7 đại diện cho nội dung yêu cầu HTTP như một phiên bản của Psr\Http\Message\StreamInterface. có thể lấy phiên bản StreamInterface của thân yêu cầu HTTP bằng phương thức getBody() của đối tượng Yêu cầu PSR-7. Phương thức getBody() thích hợp hơn nếu kích thước yêu cầu HTTP đến không xác định hoặc quá lớn đối với bộ nhớ khả dụng.
$body = $request->getBody();


- Để hiển thị một string ra màn hình sử dụng 
 $response->getBody()->write('Hello World');


//iểm tra phương thức của yêu cầu HTTP bằng phương thức
$method = $request->getMethod(); //GET, POST ...


//get tham số trên url 
$request->getAttribute('id');


//để get data riêng lẻ  với puong thức post, put sử dụng 
$request->getParam('title')


//Cách sử dụng getParam() trong phiên bản 4
Tùy chọn 1: Sử dụng đối tượng yêu cầu PSR-7, ví dụ: $request->getQueryParams() hoặc $request->getParsedBody()

Tùy chọn 2: Sử dụng đối tượng yêu cầu tương thích PSR-7 slim/http 71, ví dụ: $request->getParam('my-param') hoặc $request->getParsedBodyParam('key')
https://discourse.slimframework.com/t/how-to-use-getparam-in-version-4/3655





















